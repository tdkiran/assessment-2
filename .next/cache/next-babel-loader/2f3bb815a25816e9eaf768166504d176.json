{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nfunction generateRooms() {\n  var TOTAL_ROOMS = 4;\n  var rooms = Array(TOTAL_ROOMS).fill(1).map(function (v, i) {\n    return {\n      roomId: i,\n      title: \"Room \".concat(i + v),\n      available: true,\n      selected: false,\n      adults: 0,\n      children: 0\n    };\n  }).reduce(function (byId, room) {\n    byId[room.roomId] = room;\n    return byId;\n  }, {});\n  rooms[0].available = false;\n  return rooms;\n}\n\nvar AppInitialState = {\n  rooms: generateRooms(),\n  selectedRoomIds: [],\n  occupants: {}\n};\nexport var actionTypes = {\n  SELECT_ROOM: 'SELECT_ROOM',\n  DESELECT_ROOM: 'DESELECT_ROOM',\n  RESET_SELECTION: 'RESET_SELECTION',\n  SELECT_OCCUPANT: 'SELECT_OCCUPANT',\n  INIT_STATE: 'INIT_STATE'\n}; // REDUCERS\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AppInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.SELECT_ROOM:\n      return _objectSpread({}, state, {\n        selectedRoomIds: [].concat(_toConsumableArray(state.selectedRoomIds), [action.roomId])\n      });\n\n    case actionTypes.DESELECT_ROOM:\n      return _objectSpread({}, state, {\n        selectedRoomIds: state.selectedRoomIds.filter(function (roomId) {\n          return roomId !== action.roomId;\n        })\n      });\n\n    case actionTypes.RESET_SELECTION:\n      return _objectSpread({}, state, {\n        selectedRoomIds: [],\n        occupants: {}\n      });\n\n    case actionTypes.SELECT_OCCUPANT:\n      return _objectSpread({}, state, {\n        occupants: _objectSpread({}, state.occupants, _defineProperty({}, action.roomId, _objectSpread({}, state.occupants[action.roomId], _defineProperty({}, action.occupant_type, action.qty))))\n      });\n\n    case actionTypes.INIT_STATE:\n      return action.state;\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport var selectRoom = function selectRoom(roomId) {\n  return {\n    type: actionTypes.SELECT_ROOM,\n    roomId: roomId\n  };\n};\nexport var deSelectRoom = function deSelectRoom(roomId) {\n  return {\n    type: actionTypes.DESELECT_ROOM,\n    roomId: roomId\n  };\n};\nexport var resetSelection = function resetSelection() {\n  return {\n    type: actionTypes.RESET_SELECTION\n  };\n};\nexport var selectOccupant = function selectOccupant(roomId, occupant_type, qty) {\n  return {\n    type: actionTypes.SELECT_OCCUPANT,\n    roomId: roomId,\n    occupant_type: occupant_type,\n    qty: qty\n  };\n};\nexport var initState = function initState(state) {\n  return {\n    type: actionTypes.INIT_STATE,\n    state: state\n  };\n}; // selector\n\nexport var getSelectedRoomIds = function getSelectedRoomIds(state) {\n  return state.selectedRoomIds;\n};\nexport var getSelectedRooms = function getSelectedRooms(state) {\n  return state.selectedRoomIds.map(function (roomId) {\n    return state.rooms[roomId];\n  });\n};\nexport var getOccupants = function getOccupants(state) {\n  return state.occupants;\n};\nexport var getRooms = function getRooms(state) {\n  return _Object$values(state.rooms);\n}; // init store\n\nexport function initializeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AppInitialState;\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware()));\n}","map":{"version":3,"sources":["/Users/tdkiran/Desktop/with-redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","generateRooms","TOTAL_ROOMS","rooms","Array","fill","map","v","i","roomId","title","available","selected","adults","children","reduce","byId","room","AppInitialState","selectedRoomIds","occupants","actionTypes","SELECT_ROOM","DESELECT_ROOM","RESET_SELECTION","SELECT_OCCUPANT","INIT_STATE","reducer","state","action","type","filter","occupant_type","qty","selectRoom","deSelectRoom","resetSelection","selectOccupant","initState","getSelectedRoomIds","getSelectedRooms","getOccupants","getRooms","initializeStore","initialState"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nfunction generateRooms() {\n  const TOTAL_ROOMS = 4;\n  const rooms = Array(TOTAL_ROOMS).fill(1)\n    .map((v, i) => ({\n      roomId: i,\n      title: `Room ${i + v}`,\n      available: true,\n      selected: false,\n      adults: 0,\n      children: 0\n    }))\n    .reduce((byId, room) => {\n      byId[room.roomId] = room;\n      return byId;\n    }, {});\n\n  rooms[0].available = false;\n\n  return rooms;\n}\n\nconst AppInitialState = {\n  rooms: generateRooms(),\n  selectedRoomIds: [],\n  occupants: {\n\n  }\n}\n\nexport const actionTypes = {\n  SELECT_ROOM: 'SELECT_ROOM',\n  DESELECT_ROOM: 'DESELECT_ROOM',\n  RESET_SELECTION: 'RESET_SELECTION',\n  SELECT_OCCUPANT: 'SELECT_OCCUPANT',\n  INIT_STATE: 'INIT_STATE'\n}\n\n// REDUCERS\nexport const reducer = (state = AppInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.SELECT_ROOM:\n      return {\n        ...state,\n        selectedRoomIds: [\n          ...state.selectedRoomIds,\n          action.roomId\n        ]\n      };\n    case actionTypes.DESELECT_ROOM:\n      return {\n        ...state,\n        selectedRoomIds: state.selectedRoomIds.filter(roomId => roomId !== action.roomId)\n      };\n\n    case actionTypes.RESET_SELECTION:\n      return {\n        ...state,\n        selectedRoomIds: [],\n        occupants: {}\n      };\n\n    case actionTypes.SELECT_OCCUPANT:\n      return {\n        ...state,\n        occupants: {\n          ...state.occupants,\n          [action.roomId]: {\n            ...state.occupants[action.roomId],\n            [action.occupant_type]: action.qty\n          }\n        }\n      };\n    case actionTypes.INIT_STATE:\n      return action.state;\n    default:\n      return state\n  }\n}\n\n// ACTIONS\nexport const selectRoom = (roomId) => {\n  return { type: actionTypes.SELECT_ROOM, roomId };\n}\nexport const deSelectRoom = (roomId) => {\n  return { type: actionTypes.DESELECT_ROOM, roomId };\n}\n\nexport const resetSelection = () => {\n  return { type: actionTypes.RESET_SELECTION };\n}\nexport const selectOccupant = (roomId, occupant_type, qty) => {\n  return { type: actionTypes.SELECT_OCCUPANT, roomId, occupant_type, qty };\n}\n\nexport const initState = (state) => {\n  return { type: actionTypes.INIT_STATE, state };\n}\n\n\n// selector\nexport const getSelectedRoomIds = (state) => state.selectedRoomIds;\nexport const getSelectedRooms = (state) => state.selectedRoomIds.map(roomId => state.rooms[roomId]);\nexport const getOccupants = (state) => state.occupants;\nexport const getRooms = (state) => Object.values(state.rooms);\n\n\n\n\n// init store\nexport function initializeStore(initialState = AppInitialState) {\n  return createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware())\n  )\n}"]},"metadata":{},"sourceType":"module"}