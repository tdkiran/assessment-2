{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/tdkiran/Desktop/with-redux/components/booking/booking.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { AppCard } from '../common/card';\nimport { Room } from './room';\nimport styled from 'styled-components';\nconst BookingContainer = styled.div`\ndisplay: flex;\n`;\nexport class Booking extends Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {}\n\n  onSelectionChange(room, selected) {\n    const {\n      rooms: _rooms,\n      selectRoom,\n      deSelectRoom,\n      resetSelection\n    } = this.props;\n\n    const rooms = _rooms.filter(r => r.available); // resetSelection();\n\n\n    const index = rooms.indexOf(room);\n    rooms.slice(0, index + 1).forEach(({\n      roomId\n    }) => selectRoom(roomId));\n    rooms.slice(index + 1).forEach(({\n      roomId\n    }) => deSelectRoom(roomId));\n  }\n\n  render() {\n    const {\n      rooms,\n      selectedRoomIds = [],\n      selectOccupant\n    } = this.props;\n    return __jsx(BookingContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, rooms.map(room => {\n      return __jsx(Room, _extends({}, room, {\n        selectOccupant: selectOccupant,\n        selected: selectedRoomIds.includes(room.roomId),\n        onSelectionChange: this.onSelectionChange.bind(this, room),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/tdkiran/Desktop/with-redux/components/booking/booking.js"],"names":["React","Component","AppCard","Room","styled","BookingContainer","div","Booking","constructor","componentDidMount","onSelectionChange","room","selected","rooms","_rooms","selectRoom","deSelectRoom","resetSelection","props","filter","r","available","index","indexOf","slice","forEach","roomId","render","selectedRoomIds","selectOccupant","map","includes","bind"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,GAAI;;CAApC;AAIA,OAAO,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AACnCO,EAAAA,WAAW,GAAG;AACV;AACH;;AACDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC9B,UAAM;AAAEC,MAAAA,KAAK,EAAEC,MAAT;AAAiBC,MAAAA,UAAjB;AAA6BC,MAAAA,YAA7B;AAA2CC,MAAAA;AAA3C,QAA8D,KAAKC,KAAzE;;AACA,UAAML,KAAK,GAAGC,MAAM,CAACK,MAAP,CAAcC,CAAC,IAAIA,CAAC,CAACC,SAArB,CAAd,CAF8B,CAG9B;;;AACA,UAAMC,KAAK,GAAGT,KAAK,CAACU,OAAN,CAAcZ,IAAd,CAAd;AAEAE,IAAAA,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAeF,KAAK,GAAG,CAAvB,EAA0BG,OAA1B,CAAkC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgBX,UAAU,CAACW,MAAD,CAA5D;AAEAb,IAAAA,KAAK,CAACW,KAAN,CAAYF,KAAK,GAAG,CAApB,EAAuBG,OAAvB,CAA+B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgBV,YAAY,CAACU,MAAD,CAA3D;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEd,MAAAA,KAAF;AAASe,MAAAA,eAAe,GAAG,EAA3B;AAA+BC,MAAAA;AAA/B,QAAkD,KAAKX,KAA7D;AAEA,WAAQ,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJL,KAAK,CAACiB,GAAN,CAAWnB,IAAD,IAAU;AAChB,aAAO,MAAC,IAAD,eAAUA,IAAV;AACH,QAAA,cAAc,EAAEkB,cADb;AAEH,QAAA,QAAQ,EAAED,eAAe,CAACG,QAAhB,CAAyBpB,IAAI,CAACe,MAA9B,CAFP;AAGH,QAAA,iBAAiB,EAAE,KAAKhB,iBAAL,CAAuBsB,IAAvB,CAA4B,IAA5B,EAAkCrB,IAAlC,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAIH,KALD,CADI,CAAR;AAQH;;AA7BkC","sourcesContent":["import React, { Component } from 'react';\nimport { AppCard } from '../common/card';\nimport { Room } from './room';\nimport styled from 'styled-components';\n\nconst BookingContainer = styled.div`\ndisplay: flex;\n`;\n\nexport class Booking extends Component {\n    constructor() {\n        super();\n    }\n    componentDidMount() {\n    }\n\n    onSelectionChange(room, selected) {\n        const { rooms: _rooms, selectRoom, deSelectRoom, resetSelection } = this.props;\n        const rooms = _rooms.filter(r => r.available);\n        // resetSelection();\n        const index = rooms.indexOf(room);\n\n        rooms.slice(0, index + 1).forEach(({ roomId }) => selectRoom(roomId));\n\n        rooms.slice(index + 1).forEach(({ roomId }) => deSelectRoom(roomId));\n    }\n\n    render() {\n        const { rooms, selectedRoomIds = [], selectOccupant } = this.props;\n\n        return (<BookingContainer>{\n            rooms.map((room) => {\n                return <Room {...room}\n                    selectOccupant={selectOccupant}\n                    selected={selectedRoomIds.includes(room.roomId)}\n                    onSelectionChange={this.onSelectionChange.bind(this, room)} />\n            })\n        }</BookingContainer>);\n    }\n}"]},"metadata":{},"sourceType":"module"}